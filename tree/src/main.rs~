use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]

struct Node {
    value: i32,
    
    // Adding a Reference from a Child to Its Parent
    parent: RefCell<Weak<Node>>,

    // We want a Node to own its children, and 
    // we want to share that ownership with variables so 
    // we can access each Node in the tree directly. 
    // To do this, we define the Vec<T> items to be values of type Rc<Node>.    
    // We also want to modify which nodes are children of another node, 
    // so we have a RefCell<T> in children around the Vec<Rc<Node>>.
    children: RefCell<Vec<Rc<Node>>>,
}

fn main() {
    
    // Listing 15-27: Creating a leaf node with no children and a branch node with leaf as one of its children
    // create one Node instance named leaf with the value 3 and no children, and 
    // another instance named branch with the value 5 and leaf as one of its children,
    
    // Listing 15-28: A leaf node with a weak reference to its parent node branch
    // update main to use this new definition so the leaf node will have a way to refer to its parent, branch:
    
    // Listing 15-29: Creating branch in an inner scope and examining strong and weak reference counts
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );

    {
        let branch = Rc::new(Node {
            value: 5,
            parent: RefCell::new(Weak::new()),
            children: RefCell::new(vec![Rc::clone(&leaf)]),
        });

        *leaf.parent.borrow_mut() = Rc::downgrade(&branch);

        println!(
            "branch strong = {}, weak = {}",
            Rc::strong_count(&branch),
            Rc::weak_count(&branch),
        );

        println!(
            "leaf strong = {}, weak = {}",
            Rc::strong_count(&leaf),
            Rc::weak_count(&leaf),
        );
    }

    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());
    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );
}
