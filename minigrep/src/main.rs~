use std::env; // std::env::args function provided in Rustâ€™s standard library. This function returns an iterator of the command line arguments passed to minigrep

use std::process;

use minigrep::Config;

// Listing 12-1: Collecting the command line arguments into a vector and printing them
fn main() {

    // call the collect method on an iterator to turn it into a collection, such as a vector, 
    // that contains all the elements the iterator produces.
    // we explicitly annotate the type of args to specify that we want a vector of strings
    let args: Vec<String> = env::args().collect();

    // dbg!(args);
    
    /*
    // Listing 12-2: Creating variables to hold the query argument and file path argument
    let query = &args[1];
    let file_path = &args[2];
    */ // Extracted
    // let (query, file_path) = parse_config(&args);
    // let config = parse_config(&args);
    // let config = Config::new(&args);
    
    // Listing 12-10: Exiting with an error code if building a Config fails
    // unwrap_or_else will pass the inner value of the Err, 
    // which in this case is the static string 
    // "not enough arguments" that we added in Listing 12-9, to our closure in the 
    // argument err that appears between the vertical pipes
    let config = Config::build(&args).unwrap_or_else(|err| { 
        //println!("Problem parsing arguments: {err}");
        process::exit(1);
    });
    
    /*
    println!("Searching for {}", query);
    println!("In file {}", file_path);
    */
    //println!("Searching for {}", config.query);
    //println!("In file {}", config.file_path);
    

    // Listing 12-4: Reading the contents of the file specified by the second argument
    /* let contents = fs::read_to_string(config.file_path).expect("Should have been able to read the file");
    
    println!("With text:\n{contents}");*/
    // run(config);
    
    if let Err(e) = minigrep::run(config) {
        //println!("Application error: {e}");
        process::exit(1);
    }
}

/*
// Listing 12-11: Extracting a run function containing the rest of the program logic
fn run(config: Config) {
    let contents = fs::read_to_string(config.file_path).expect("Should have been able to read the file");
        
    println!("With text:\n{contents}");
}*/



/*
// Listing 12-5: Extracting a parse_config function from main
// we pass the whole vector to the parse_config function
// fn parse_config(args: &[String]) -> (&str, &str) {
fn parse_config(args: &[String]) -> Config {
    /*
    let query = &args[1];
    let file_path = &args[2];
    */
    // Listing 12-6: Refactoring parse_config to return an instance of a Config struct
    let query = args[1].clone();
    let file_path = args[2].clone();    

    Config { query, file_path }
}
*/

/*
// we can change parse_config from a plain function to a function named new that is associated with the Config struct. Making this change will make the code more idiomatic.
// Listing 12-7: Changing parse_config into Config::new
impl Config {
    fn new(args: &[String]) -> Config {
        // Listing 12-8: Adding a check for the number of arguments
        if args.len() < 3 {
            panic!("not enough arguments");
        }    
        let query = args[1].clone();
        let file_path = args[2].clone();
        Config { query, file_path }
    }
}*/


