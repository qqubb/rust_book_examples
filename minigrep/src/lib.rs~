use std::fs;
use std::error::Error;

use std::env;

// Listing 12-6: Refactoring parse_config to return an instance of a Config struct
pub struct Config {
    pub query: String,
    pub file_path: String,
    
    pub ignore_case: bool,
}

// Listing 12-9: Returning a Result from Config::build
impl Config {
    pub fn build(args: &[String]) -> Result<Config, &'static str> {
        // Listing 12-8: Adding a check for the number of arguments
        if args.len() < 3 {
            return Err("not enough arguments");
        }    
        let query = args[1].clone();
        let file_path = args[2].clone();
        
        // Listing 12-23: Checking for any value in an environment variable named IGNORE_CASE
        let ignore_case = env::var("IGNORE_CASE").is_ok();
                
        Ok(Config { query, file_path, ignote_case})
    }
}

// Listing 12-12: Changing the run function to return Result
// changed the return type of the run function to Result<(), Box<dyn Error>>
// Box<dyn Error> means the function will return a type that implements the Error trait
// Second, weâ€™ve removed the call to expect in favor of the ? operator, 
// as we talked about in Chapter 9. Rather than panic! on an error, 
// ? will return the error value from the current function for the caller to handle.

pub fn run(config: Config) -> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config.file_path)?;
        
    //println!("With text:\n{contents}");
    /*
    // Using the search Function in the run Function
    for line in search(&config.query, &contents) {
        println!("{line}");
    }
    
    Ok(())
    */
    
    // Listing 12-22: Calling either search or search_case_insensitive based on the value in config.ignore_case
    let results = if config.ignore_case {
        search_case_insensitive(&config.query, &contents)
    } else {
        search(&config.query, &contents)
    };

    for line in results {
        println!("{line}");
    }

    Ok(())
}

// Listing 12-16: Defining just enough of the search function so our test will compile
pub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {
    // vec![]
    
    let mut results = Vec::new();

    // Listing 12-17: Iterating through each line in contents
    for line in contents.lines() {
        if line.contains(query) {
            results.push(line);
        }        
    }
    
    results
    
}

//Listing 12-21: Defining the search_case_insensitive function to lowercase the query and the line before comparing them
pub fn search_case_insensitive<'a>(
    query: &str,
    contents: &'a str,
) -> Vec<&'a str> {
    let query = query.to_lowercase();
    let mut results = Vec::new();

    for line in contents.lines() {
        if line.to_lowercase().contains(&query) {
            results.push(line);
        }
    }

    results
}

// Listing 12-15: Creating a failing test for the search function we wish we had
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn one_result() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive.
Pick three.";

        assert_eq!(vec!["safe, fast, productive."], search(query, contents));
    }

    #[test]
    fn case_sensitive() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive.
Pick three.
Duct tape.";

        assert_eq!(vec!["safe, fast, productive."], search(query, contents));
    }

    #[test]
    fn case_insensitive() {
        let query = "rUsT";
        let contents = "\
Rust:
safe, fast, productive.
Pick three.
Trust me.";

        assert_eq!(
            vec!["Rust:", "Trust me."],
            search_case_insensitive(query, contents)
        );
    }  
    
    
}
